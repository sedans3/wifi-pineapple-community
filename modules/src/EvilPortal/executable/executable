#!/bin/bash

# Modified by oXis for the Wifi Pineapple (OpenWRT)

# Written by Sitwon and The Doctor.
# Copyright (C) 2013 Project Byzantium
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.

arp () { cat /proc/net/arp; } # arp function

IPTABLES=/usr/sbin/iptables
ARP=arp
IP=172.16.42.1

case "$1" in
    'init')

        # Convert the IP address of the client interface into a netblock.
        CLIENTNET=`echo $IP | sed 's/1$/0\/24/'`

        # Removed the exemption rule that ignored traffic not originating from the client network.
        # This line has been removed to allow all traffic to be processed, even if not from the client network.
        # $IPTABLES -t mangle -I PREROUTING -p all ! -s $CLIENTNET -j RETURN

        # Traffic not coming from an accepted user gets marked 99.
        $IPTABLES -t mangle -A fwmark -j MARK --set-mark 99

        # Redirect all HTTP traffic (port 80) to the captive portal web server.
        # This ensures that any web traffic is sent to the portal, even if no internet is available.
        $IPTABLES -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination $IP:80

        # Redirect all DNS traffic (port 53) to the local DNS server for captive portal.
        # This ensures that DNS requests are handled locally for the captive portal, even without internet.
        $IPTABLES -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to-destination $IP

        # Accept necessary traffic for captive portal and management access.
        $IPTABLES -t filter -A INPUT -p tcp --dport 80 -j ACCEPT    # Web server (HTTP)
        $IPTABLES -t filter -A INPUT -p udp --dport 53 -j ACCEPT    # DNS
        $IPTABLES -t filter -A INPUT -p tcp --dport 1471 -j ACCEPT  # PineAP admin page
        $IPTABLES -t filter -A INPUT -p tcp --dport 22 -j ACCEPT    # SSH

        # Drop all other traffic marked 99 (unauthorized traffic).
        # Any traffic that is marked as not authorized will be blocked.
        $IPTABLES -t filter -A FORWARD -m mark --mark 99 -j DROP
        $IPTABLES -t filter -A INPUT -m mark --mark 99 -j DROP

        exit 0
        ;;
    'add')
        # $2: IP address of client.
        CLIENT=$2

        # Isolate the MAC address of the client in question.
        CLIENTMAC=`$ARP -n | grep ':' | grep $CLIENT | awk '{print $4}'`

        # Add the MAC address of the client to the whitelist, allowing access even if IP changes.
        $IPTABLES -t mangle -I fwmark -m mac --mac-source $CLIENTMAC -j RETURN

        exit 0
        ;;
    'remove')
        # $2: IP address of client.
        CLIENT=$2

        # Isolate the MAC address of the client in question.
        CLIENTMAC=`$ARP -n | grep ':' | grep $CLIENT | awk '{print $4}'`

        # Delete the MAC address of the client from the whitelist.
        $IPTABLES -t mangle -D fwmark -m mac --mac-source $CLIENTMAC -j RETURN

        exit 0
        ;;
    'purge')
        CLIENTNET=`echo $IP | sed 's/1$/0\/24/'`
        # Purge the user-defined chains
        $IPTABLES -t mangle -F fwmark
        $IPTABLES -t nat -F PREROUTING
        $IPTABLES -t filter -F INPUT
        $IPTABLES -t filter -F FORWARD
        # Removed the exemption rule again during purge, ensuring all traffic is processed.
        # $IPTABLES -t mangle -D PREROUTING -p all ! -s $CLIENTNET -j RETURN

        exit 0
        ;;
    'list')
        # Display the currently running iptables ruleset.
        $IPTABLES --list -t nat -n
        $IPTABLES --list -t mangle -n
        $IPTABLES --list -t filter -n

        exit 0
        ;;
    *)
        echo "USAGE: $0 {initialize|add <IP>|remove <IP>|purge|list}"
        exit 0
    esac
